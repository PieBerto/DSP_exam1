openapi: 3.0.1
info:
  title: Film Manager
  description: REST APIs for the interaction with the Film Manager service.
  termsOfService: 'http://swagger.io/terms/'
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
servers:
  - url: 'https://todo.swagger.io/v2'
  - url: 'http://todo.swagger.io/v2'
tags:
  - name: films
    description: the set of all the films
  - name: films/private
    description: the set of all the private films of the logged-in user
  - name: 'films/private/{filmId}'
    description: the private film with ID filmId
  - name: films/public
    description: the set of all the public films
  - name: films/public/invited
    description: the set of the public films that the logged-in user has been invited to review
  - name: 'films/public/{filmId}'
    description: the public film with ID filmId
  - name: 'films/public/{filmId}/reviews'
    description: the reviews issued for the public film with ID filmId
  - name: 'films/public/{filmId}/reviews/{reviewerId}'
    description: the review issued to the user with ID reviewerId for the public film with ID filmId
#New code
  - name: 'films/public/collaborationReviews/{collaborationId}'
    description: The specific collaboration review accessible by his code
  - name: 'films/public/{filmId}/collaborationReviews'
    description: the collaboration reviews issued for the public film with ID filmId
  - name: 'films/public/{filmId}/collaborationReviews/{reviewerId}'
    description: the collaboration review issued to the user with ID reviewerId for the public film with ID filmId
  - name: 'films/public/{filmId}/collaborationReviews/{reviewerId}/drafts'
    description: the drafts of the collaboration review issued to the user with ID reviewerId for the public film with ID filmId
#End new code
  - name: films/public/assignments
    description: the assignments of review invitations to users
  - name: users
    description: the set of all the users
  - name: users/authenticator
    description: the authenticator
  - name: 'users/{userId}'
    description: the user with ID userId
paths:
  '/api/films':
    post:
      tags:
        - films
      security:
        - cookieAuth: []
      summary: Create a new film
      description: A new film is created by the authenticated user.
      operationId: createFilm
      requestBody:
        description: Representation of the film to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Film'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Film'
        '400':
          description: Bad Request
          content: {}
        '401':
          description: Unauthorized
          content: {}
        '500':
          description: Internal Server Error
          content: {}
  '/api/films/private': 
    get:
      tags:
        - films/private
      security:
        - cookieAuth: []
      summary: Retrieve the private films of the logged-in user 
      description: >-
        The private films of the logged-in user are retrieved. A pagination mechanism is implemented to limit the size of messages.
      operationId: getPrivateFilms
      parameters:
        - in: query
          name: pageNo
          required: false
          schema:
            type: integer
          description: 'The id of the requested page (if absent, the first page is returned)'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalPages:
                    type: integer
                  currentPage:
                    type: integer
                  totalItems:
                    type: integer
                  films:
                    type: array
                    items:
                      $ref: '#/components/schemas/Film'
                  next:
                    type: string
                    format: uri
        '401':
          description: Unauthorized
          content: {}
        '500':
          description: Internal Server Error
          content: {} 
  '/api/films/private/{filmId}':
    get:
      tags:
        - 'films/private/{filmId}'
      security:
        - cookieAuth: []
      summary: Retrieve a private film
      description: The private film with ID filmId is retrieved. This operation can be performed on the film if the user who performs the operation is the film's owner.
      operationId: getSinglePrivateFilm
      parameters:
        - name: filmId
          in: path
          description: ID of the film to retrieve
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Film'
        '401':
          description: Unauthorized
          content: {}
        '403':
          description: Forbidden
          content: {}
        '404':
          description: Not Found
          content: {}
        '500':
          description: Internal Server Error
          content: {}
    put:
      tags:
        - 'films/private/{filmId}'
      security:
        - cookieAuth: []
      summary: Update a private film
      description: The private film with ID filmId is updated. This operation does not allow changing its visibility. This operation can be performed only by the owner.
      operationId: updateSinglePrivateFilm
      parameters:
        - name: filmId
          in: path
          description: ID of the film to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: The updated film object that needs to replace the old object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Film'
        required: true
      responses:
        '204':
          description: No Content
          content: {}
        '400':
          description: Bad Request
          content: {}
        '401':
          description: Unauthorized
          content: {}
        '403':
          description: Forbidden
          content: {}
        '409':
          description: Conflict (attempt to make unallowed change, e.g., visibility)
          content: {}
        '404':
          description: Not Found
          content: {}
        '500':
          description: Internal Server Error
          content: {}
    delete:
      tags:
        - 'films/private/{filmId}'
      security:
        - cookieAuth: []
      summary: Delete a private film
      description: The private film with ID filmId is deleted. This operation can only be performed by the owner.
      operationId: deleteSinglePrivateFilm
      parameters:
        - name: filmId
          in: path
          description: ID of the film to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Successful operation - No Content
          content: {}
        '401':
          description: Unauthorized
          content: {}
        '403':
          description: Forbidden
          content: {}
        '404':
          description: Not Found
          content: {}
        '500':
          description: Internal Server Error
          content: {}
  '/api/films/public': 
    get:
      tags:
        - films/public
      summary: Retrieve the public films
      description: >-
        The public films (i.e., the films that are visible for all the users of the service) are retrieved. This operation does not require authentication. A pagination mechanism is implemented to limit the size of messages.
      operationId: getPublicFilms
      parameters:
        - in: query
          name: pageNo
          required: false
          schema:
            type: integer
          description: 'The id of the requested page (if absent, the first page is returned)'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalPages:
                    type: integer
                  currentPage:
                    type: integer
                  totalItems:
                    type: integer
                  films:
                    type: array
                    items:
                      $ref: '#/components/schemas/Film'
                  next:
                    type: string
                    format: uri
        '500':
          description: Internal Server Error
          content: {} 
  '/api/films/public/invited': 
    get:
      tags:
        - films/public/invited
      security:
        - cookieAuth: []
      summary: Retrieve the public films that the logged-in user has been invited to review
      description: >-
        The public films that the logged-in user has been invited to review are retrieved. A pagination mechanism is implemented to limit the size of messages.
      operationId: getInvitedFilms
      parameters:
        - in: query
          name: pageNo
          required: false
          schema:
            type: integer
          description: 'The id of the requested page (if absent, the first page is returned)'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalPages:
                    type: integer
                  currentPage:
                    type: integer
                  totalItems:
                    type: integer
                  films:
                    type: array
                    items:
                      $ref: '#/components/schemas/Film'
                  next:
                    type: string
                    format: uri
        '401':
          description: Unauthorized
          content: {}
        '500':
          description: Internal Server Error
          content: {} 
  '/api/films/public/{filmId}': 
    get:
      tags:
        - films/public/{filmId}
      summary: Retrieve a public film
      description: >-
        The public film with ID filmId is retrieved. This operation does not require authentication.
      operationId: getSinglePublicFilm
      parameters:
        - name: filmId
          in: path
          description: ID of the film to retrieve
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Film'
        '404':
          description: Not Found
          content: {}
        '500':
          description: Internal Server Error
          content: {}
    put:
      tags:
        - 'films/public/{filmId}'
      security:
        - cookieAuth: []
      summary: Update a public film
      description: The public film with ID filmId is updated. This operation does not allow changing its visibility. This operation can be performed only by the owner.
      operationId: updateSinglePublicFilm
      parameters:
        - name: filmId
          in: path
          description: ID of the film to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: The updated film object that needs to replace the old object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Film'
        required: true
      responses:
        '204':
          description: No Content
          content: {}
        '400':
          description: Bad Request
          content: {}
        '401':
          description: Unauthorized
          content: {}
        '403':
          description: Forbidden
          content: {}
        '409':
          description: Conflict (attempt to make unallowed change, e.g., visibility)
          content: {}
        '404':
          description: Not Found
          content: {}
        '500':
          description: Internal Server Error
          content: {}
    delete:
      tags:
        - 'films/public/{filmId}'
      security:
        - cookieAuth: []
      summary: Delete a public film
      description: The public film with ID filmId is deleted. This operation can only be performed by the owner.
      operationId: deleteSinglePublicFilm
      parameters:
        - name: filmId
          in: path
          description: ID of the film to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Successful operation - No Content
          content: {}
        '401':
          description: Unauthorized
          content: {}
        '403':
          description: Forbidden
          content: {}
        '404':
          description: Not Found
          content: {}
        '500':
          description: Internal Server Error
          content: {}
  '/api/films/public/{filmId}/reviews':
    post:
      tags:
        - 'films/public/{filmId}/reviews'
      security:
        - cookieAuth: []
      summary: Issue film reviewr to some users
      description: The film with ID filmId is assigned to one or more users for review and the corresponding reviews are created. The users are specified in the review representations in the request body. This operation can only be performed by the owner.
      operationId: issueFilmReview
      parameters:
        - name: filmId
          in: path
          description: ID of the film
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: the new film reviews, including the users to whom they are issued
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Review'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Review'
        '400':
          description: Bad Request
          content: {}
        '401':
          description: Unauthorized
          content: {}
        '403':
          description: Forbidden
          content: {}
        '404':
          description: Not Found
          content: {}
        '409':
          description: Conflict (e.g., wrong film id or unknown reviewer id)
          content: {}
        '500':
          description: Internal Server Error
          content: {}
    get:
      tags:
        - 'films/public/{filmId}/reviews'
      summary: Retrieve the list of all the reviews that have been issued/completed for a film 
      description: >-
        All the reviews that have been issued/completed for the film with ID filmId are retrieved. A pagination mechanism is implemented to limit the size of messages.
        This operation does not require authentication. 
      operationId: getFilmReviews
      parameters:
        - name: filmId
          in: path
          description: ID of the film whose reviews must be retrieved
          required: true
          schema:
            type: integer
            format: int64
        - in: query
          name: pageNo
          required: false
          schema:
            type: integer
          description: ID of the requested page (if absent, the first page is returned)'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                  type: array
                  items:
                    type: object
                    properties:
                      totalPages:
                        type: integer
                      currentPage:
                        type: integer
                      totalItems:
                        type: integer
                      reviews:
                        type: array
                        items:
                          $ref: '#/components/schemas/Review'
                      next:
                        type: string
                        format: uri
        '404':
          description: Not Found
          content: {}
        '500':
          description: Internal Server Error
          content: {}
  '/api/films/public/{filmId}/reviews/{reviewerId}':
    get:
      tags:
        - 'films/public/{filmId}/reviews/{reviewerId}'
      summary: Retrieve a review that has been issued/completed for a film 
      description: >-
        The review of the film with ID filmID issued to the user with ID reviewerId is retrieved. This operation does not require authentication. 
      operationId: getSingleReview
      parameters:
        - name: filmId
          in: path
          description: ID of the film whose reviews must be retrieved
          required: true
          schema:
            type: integer
            format: int64
        - name: reviewerId
          in: path
          description: ID of the user to whom the review has been issued
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '404':
          description: Not Found
          content: {}
        '500':
          description: Internal Server Error
          content: {}
    put:
      tags:
        - 'films/public/{filmId}/reviews/{reviewerId}'
      security:
        - cookieAuth: []
      summary: Complete a review
      description: The review of the film with ID filmId and issued to the user with ID reviewerId is completed. This operation only allows setting the "completed" property to the "true" value, and changing the values of the "reviewDate", "rating", and "review" properties. This operation can be performed only by the invited reviewer.
      operationId: updateSingleReview
      parameters:
        - name: filmId
          in: path
          description: ID of the film whose review must be completed
          required: true
          schema:
            type: integer
            format: int64
        - name: reviewerId
          in: path
          description: ID of the user to whom the review has been issued
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: The properties of the Review object that must be updated
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                completed:
                  type: boolean
                  default: 'true'
                reviewDate:
                  type: string
                  format: date
                  description: the date when the review has been completed by the invited user
                rating:
                  type: integer
                  description: the rating the reviewer has given to the film
                  minimum: 1
                  maximum: 10
                review:
                  type: string
                  description: a textual description of the review
                  maxLength: 1000
      responses:
        '204':
          description: No Content
          content: {}
        '400':
          description: Bad Request
          content: {}
        '401':
          description: Unauthorized
          content: {}
        '403':
          description: Forbidden
          content: {}
        '404':
          description: Not Found
          content: {}
        '500':
          description: Internal Server Error
          content: {}
#New code
  '/api/films/public/collaborationReviews/{collaborationId}':
    get:
      tags:
        - '/films/public/{filmId}/collaborationReviews/{collaborationId}'
      security:
        - cookieAuth: []
      summary: retrieve a specific review by the id of the collaboration.
      description: >-
        retrieve a specific review (completed [and closed] draft) of the film, 
        the whole list has been got from films/public/{filmId}/collaborationReviews.
        Only authenticated users can use this API
      operationId: getCollaborationReview
      parameters:
        - name: collaborationId
          in: path
          description: ID of the collaboration review
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Collaboration'
        '400':
          description: Bad Request
          content: {}
        '401':
          description: Unauthorized
          content: {}
        '404':
          description: Not Found
          content: {}
        '500':
          description: Internal Server Error
          content: {}
  '/api/films/public/{filmId}/collaborationReviews':
    get:
      tags:
       - 'films/public/{filmId}/collaborationReviews'
      summary: retrieve the film's collaboration reviews (completed draft)
      description: >-
        Retrieve all the completed drafts, for the film with id filmId.
      operationId: getCollaborationReviews
      parameters:
        - name: filmId
          in: path
          description: ID of the film whose public review invitation must be created
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Collaboration'
        '400':
          description: Bad Request
          content: {}
        '404':
          description: Not Found
          content: {}
        '500':
          description: Internal Server Error
          content: {}
    post:
      tags:
        - 'films/public/{filmId}/collaborationReviews'
      security:
        - cookieAuth: []
      summary: create a new collaboration review
      description: >-
        A collaboration review is created for the film owned by the authenticated user and assigned
        to the selected users. Only authenticated users can make this request.
      operationId: createCollaborationReview
      parameters:
        - name: filmId
          in: path
          description: ID of the film whose public review invitation must be created
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: An array containing the ID of the users the public review is required
        content:
          application/json:
            schema:
              type: array
              items:
                type: integer
                description: unique identifier of the user
      responses:
        '201':
          description: successful created and assigned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Collaboration'
        '400':
          description: Bad Request
          content: {}
        '401':
          description: Unauthorized
          content: {}
        '404':
          description: Not Found
          content: {}
        '500':
          description: Internal Server Error
          content: {}
  '/api/films/public/{filmId}/collaborationReviews/{reviewerId}':
    get:
      tags:
        - 'films/public/{filmId}/collaborationReviews/{reviewerId}'
      security:
        - cookieAuth: []
      summary: retrieve the user's collaboration reviews (closed and open drafts), an history of all the drafts
      description: >-
        retrieve all the drafts of the authenticated user reviewerId for the film filmId.
        Only authenticated users can make this request.
      operationId: getUserCollaborationReview
      parameters:
        - name: filmId
          in: path
          description: ID of the film
          required: true
          schema:
            type: integer
            format: int64
        - name: reviewerId
          in: path
          description: ID of the collaboration reviewer
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Collaboration'
        '400':
          description: Bad Request
          content: {}
        '401':
          description: Unauthorized
          content: {}
        '404':
          description: Not Found
          content: {}
        '500':
          description: Internal Server Error
          content: {}
  '/api/films/public/{filmId}/collaborationReviews/{reviewerId}/drafts':
    get:
      tags:
        - 'films/public/{filmId}/collaborationReviews/{reviewerId}/drafts'
      security:
        - cookieAuth: []
      summary: retrieve the open draft
      description: >-
        retrieve the open draft of the authenticated user reviewerId for the film filmId.
        Only authenticated users can make this request.
      operationId: getDraft
      parameters:
        - name: filmId
          in: path
          description: ID of the film
          required: true
          schema:
            type: integer
            format: int64
        - name: reviewerId
          in: path
          description: ID of the collaboration reviewer
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Collaboration'
        '400':
          description: Bad Request
          content: {}
        '401':
          description: Unauthorized
          content: {}
        '404':
          description: Not Found
          content: {}
        '500':
          description: Internal Server Error
          content: {}
    post:
      tags:
        - 'films/public/{filmId}/collaborationReviews/{reviewerId}/drafts'
      security:
        - cookieAuth: []
      summary: create an open draft
      description: >-
        create an open draft of the authenticated user reviewerId for the film filmId.
        Only authenticated users can make this request.
      operationId: createDraft
      parameters:
        - name: filmId
          in: path
          description: ID of the film
          required: true
          schema:
            type: integer
            format: int64
        - name: reviewerId
          in: path
          description: ID of the collaboration reviewer
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: A new draft
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                rating:
                  type: integer
                  description: The proposed rating for the film
                description:
                  type: string
                  description: The textual description of the draft
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Collaboration'
        '400':
          description: Bad Request
          content: {}
        '401':
          description: Unauthorized
          content: {}
        '404':
          description: Not Found
          content: {}
        '500':
          description: Internal Server Error
          content: {}
    put:
      tags:
        - 'films/public/{filmId}/collaborationReviews/{reviewerId}/drafts'
      security:
        - cookieAuth: []
      summary: modify an open draft adding a review
      description: >-
        modify an open draft of the authenticated user reviewerId for the film filmId adding a review.
        Only authenticated users can make this request.
      operationId: createDraft
      parameters:
        - name: filmId
          in: path
          description: ID of the film
          required: true
          schema:
            type: integer
            format: int64
        - name: reviewerId
          in: path
          description: ID of the collaboration reviewer
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: A new draft
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                agreement:
                  type: boolean
                  description: The proposed rating for the film
                description:
                  type: string
                  description: The textual description in case of not agree
      responses:
        '204':
          description: Successful operation - No Content
          content: {}
        '400':
          description: Bad Request
          content: {}
        '401':
          description: Unauthorized
          content: {}
        '404':
          description: Not Found
          content: {}
        '500':
          description: Internal Server Error
          content: {}
#End new code
  '/api/films/public/assignments':
    post:
      tags:
        - films/public/assignments
      security:
        - cookieAuth: []
      summary: Assign automatically review invitations for the unassigned public films owned by the authenticated user in a balanced manner
      description: >-
        The films owned by the authenticated user who performed the request and that are not assigned to any user for review, are automatically assigned to the
        users of the service in a balanced manner. Only authenticated users can make this request.
      operationId: assignReviewBalanced
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    filmId:
                     type: integer
                    reviewerId:
                      type: integer
        '401':
          description: Unauthorized
          content: {}
        '500':
          description: Internal Server Error
          content: {}
  '/api/users':
    get:
      tags:
        - users
      security:
        - cookieAuth: []
      summary: Get information about the users
      description: >-
        The available information (passwords excluded) about all the
        users is retrieved. This operation is available only to authenticated users.
      operationId: getUsers
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content: {}
        '404':
          description: Not Found
          content: {}
  '/api/users/{userId}':
    get:
      tags:
        - 'users/{userId}'
      security:
        - cookieAuth: []
      summary: Get information about a user
      description: >-
        The available information (password excluded) about the user
        specified by userId is retrieved.
      operationId: getSingleUser
      parameters:
        - name: userId
          in: path
          description: ID of the user to get
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content: {}
        '404':
          description: Not Found
          content: {}
  '/api/users/authenticator':
    post:
      tags:
        - users/authenticator
      summary: Logs a user in or out
      description: >-
        The user who wants to log in or out sends the user data to the
        authenticator which performs the operation. For logout, the operation is possible only for authenticated users.
      operationId: authenticateUser
      parameters:
        - in: query
          name: type
          schema:
            type: string
          description: The operation type ("login" or "logout")
      requestBody:
        description: >-
          The data of the user who wants to perform log in. For login
          the structure must contain email and password.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '204':
          description: No Content
          headers:
            Set-Cookie:
              schema:
                type: string
                example: token=abcde12345; Path=/; HttpOnly
        '400':
          description: Bad Request
          content: {}
        '401':
          description: Unauthorized
          content: {}
components:
  schemas:
    User: 
      description: schema for User data structures
      type: object
      additionalProperties: false
      properties:
        $schema:
          type: string
          description: path to the JSON Schema to use for the validation of the JSON data structure
            describing the user
        id:
          type: integer
          description: unique identifier for the user
        email:
          type: string
          format: email
          description: user email
        name:
          type: string
          description: username
        password:
          type: string
          minLength: 6
          maxLength: 20
          description: user password
        self: 
          type: string
          format: uri
      required:
      - email
    Film:
      description: schema for Film data structures
      type: object
      additionalProperties: false
      properties:
        $schema:
          type: string
          description: path to the JSON Schema to use for the validation of the JSON data structure
            describing the film
        id:
          type: integer
          description: unique identifier for the film data structure
        title:
          type: string
          description: textual title of the film
        owner:
          type: integer
          description: unique identifier of the the film data structure owner
        private:
          type: boolean
          description: true if only the owner of the film data structure can access it, false otherwise
          default: 'true'
        watchDate:
          type: string
          format: date
          description: the date when the film was watched by the owner
        rating:
          type: integer
          description: the rating the owner has given to the film
          minimum: 1
          maximum: 10
        favorite:
          type: boolean
          description: 'true if the film is among the favourite
            ones of the owner, false otherwise '
          default: 'false'
        self: 
          type: string
          format: uri
      required:
      - title
      - owner
      - private
    Review:
      description: schema for Review data structures
      type: object
      additionalProperties: false
      properties:
        $schema:
          type: string
          description: path to the JSON Schema to use for the validation of the JSON data structure
            describing the film
        filmId:
          type: integer
          description: unique identifier of the film for which a review invitation has been
            issued
        reviewerId:
          type: integer
          description: unique identifier of the user who has received the review invitation
        completed:
          type: boolean
          description: true if the review has been completed, false
            otherwise
          default: 'false'
        reviewDate:
          type: string
          format: date
          description: the date when the review has been completed by the invited user
        rating:
          type: integer
          description: the rating the reviewer has given to the film
          minimum: 1
          maximum: 10
        review:
          type: string
          description: a textual description of the review
          maxLength: 1000
        self: 
          type: string
          format: uri
      required:
      - filmId
      - reviewerId
#New code
    Collaboration:
      description: JSON Schema for Draft data structures
      type: object
      additionalProperties: false
      properties:
        $schema: 
          type: string
          description: path to the JSON Schema to use for the validation of the data structure
        collaborationId:
          type: integer
          description: unique identifier of the collaboration
        filmId:
          type: integer
          description: unique identifier of the film on which is the collaboration review
        author:
          type: integer
          description: unique identifier of the the user who has created this draft
        rating:
          type: integer
          description: the rating the reviewer has given to the film
          minimum: 1
          maximum: 10
        description:
          type: string
          description: a textual description of the review
          maxLength: 1000
        open:
          type: boolean
          description: false if the draft is closed, true if open
        completed:
          type: boolean
          description: true if all the reviewers agree on the draft, false otherwise
        review:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/DraftReview'
        self: 
          type: string
          format: uri
      required:
        - author
        - rating
        - description
    DraftReview:
      description: JSON Schema for Draft's review data structures
      type: object
      additionalProperties: false
      properties:
        $schema: 
          type: string
          description: path to the JSON Schema to use for the validation of the data structure
        userId:
          type: integer
          description: unique identifier of the the user who has agreed
        agreement:
          type: boolean
          description: true if the user agree with the draft description and rating, false otherwise
        description:
          type: string
          description: a textual description in case of disagreement with the draft
          maxLength: 1000
      required:
        - author
        - agreement
#End new code
  securitySchemes:
    cookieAuth:
      description: JWT to identify the authenticated user.
      type: apiKey
      in: cookie
      name: connect.sid
